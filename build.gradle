apply plugin: 'java'
apply plugin: 'application'
compileJava {options.encoding = "UTF-8"}

mainClassName = 'com.caffeine.Chess'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/test/java/com/caffeine/integration')
        }
    }
    unitTest {
        java {
            compileClasspath += main.output + test.output
            compileClasspath += main.output + test.output
            srcDirs(
                // Source Files
                file('src/main/java/com/caffeine/engine'),
                file('src/main/java/com/caffeine/view'),
                file('src/main/java/com/caffeine/logic'),
                // Test Files
                file('src/test/java/com/caffeine/engine'),
                file('src/test/java/com/caffeine/view'),
                file('src/test/java/com/caffeine/logic')
            )
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    unitTestCompile.extendsFrom testCompile
    unitTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile fileTree(dir:'libs', include: '*.jar')
    compile 'junit:junit:4.12'
    compile 'org.assertj:assertj-swing:3.4.0'
    compile 'org.assertj:assertj-core:3.5.2'
}

// javadoc task for main code
task mainJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    options.memberLevel = JavadocMemberLevel.PRIVATE
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${buildDir}/docs/mainjavadoc")
}

// javadoc task for test code
task testJavadoc(type: Javadoc) {
    source = sourceSets.test.allJava
    options.memberLevel = JavadocMemberLevel.PRIVATE
    classpath = sourceSets.test.compileClasspath
    destinationDir = file("${buildDir}/docs/testjavadoc")
}

// task for integration tests
task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

// task for unit tests
task unitTest(type: Test) {
    testClassesDir = sourceSets.unitTest.output.classesDir
    classpath = sourceSets.unitTest.runtimeClasspath
}

// task for all tests
task test(type: Test, overwrite: true) {
    integrationTest
    unitTest
    testLogging {
            events "PASSED", "STARTED", "FAILED", "SKIPPED"
        }
}

// Aliases
task iTest(dependsOn: integrationTest){}
task uTest(dependsOn: unitTest){}
